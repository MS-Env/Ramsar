// Define the study area (You can also draw a polygon on the map or import a shapefile)
var geometry = Study_area.geometry();

// Select one of the Landsat collections below based on the time period
//var satellite = imageCollection; //1985-2000
//var satellite = imageCollection2; //2001-2013
var satellite = imageCollection3 //2014-2023

// Select one of the seasons below
//  winter
//var startDate = '2022-12-21';
//var endDate   = '2023-03-21';
//  spring 
//var startDate = '2023-03-21';
//var endDate =   '2023-06-21';
//  summer
//var startDate = '2023-06-21';
//var endDate =   '2023-09-21';
//  fall
var startDate = '2023-09-21';
var endDate =   '2023-12-21';

// Center the map on the geometry
Map.centerObject(geometry);
Map.addLayer(geometry,false);

// Function to calculate water area for a given image (Choose one of the indices below)
// Pay attention to the band names. Replace the appropriate band names based on the Landsat collection 
var AWEI_func = function(img){
  var AWEI = img.expression(
    'BlueBand + 2.5*GreenBand - 1.5*(NIRBand + SWIR1Band) - 0.25*SWIR2Band', //AWEIsh
    //'(BlueBand+GreenBand-NIRBand-SWIR1Band-SWIR2Band)/(BlueBand+GreenBand+NIRBand+SWIR1Band+SWIR2Band)',
    //'(GreenBand*RedBand)**0.5', //saliniti index
    //'(GreenBand-NIRBand)/(GreenBand+NIRBand)', //NDWI
    //'(NIRBand-RedBand)/(NIRBand+RedBand)', //NDVI
    //'(NIRBand-SWIR1Band)/(NIRBand+SWIR1Band)', //NDFI
    //'4*(GreenBand-SWIR1Band)-(0.25*NIRBand+2.75*SWIR1Band)', //AWEIreh
    //'0.1509*BlueBand+0.1973*GreenBand+0.3279*RedBand+0.3406*NIRBand+0.71125*SWIR1Band+0.4572*SWIR2Band', //TCW
    //'(GreenBand+RedBand)/(NIRBand+SWIR1Band)',
    //'(RedBand-GreenBand)/(RedBand+GreenBand)',
    //'(SWIR1Band-GreenBand)/(SWIR1Band+GreenBand)',
    //'(GreenBand/NIRBand-SWIR2Band)/(GreenBand/NIRBand+SWIR2Band)',
    //'(GreenBand-RedBand)/(GreenBand+RedBand)',
    //'(GreenBand-SWIR2Band)/(GreenBand+SWIR2Band)',
    {
      BlueBand : img.select('SR_B1'),
      GreenBand : img.select('SR_B2'),
      RedBand : img.select('SR_B3'),
      NIRBand : img.select('SR_B4'),
      SWIR1Band : img.select('SR_B5'),
      SWIR2Band : img.select('SR_B7'),
    }
    )
  return AWEI.clip(geometry)
  .set('system:time_start',img.get('system:time_start'));
};

// Function to calculate water area for each season
var Collection_L5_L = satellite
                        .filterBounds(geometry)
                        .filterDate(startDate, endDate);
// Map over the years and calculate water area for each season
print(Collection_L5_L);
//print("Number of images = ", Collection_L5_L.size());
// We select the image with the smallest cloudy pixel percentage
var landsatImage = Collection_L5_L.sort('CLOUD_COVER')
    .first()
    .clip(geometry);
print("Landsat image cloud cover = ", landsatImage.get('CLOUD_COVER'));
var number1 = ee.Number(landsatImage.get('CLOUD_COVER'));
var number2 = ee.Number(0.1);

var Landsat_CLOUD_COVER = number1.add(number2);

var Collection_L5 = satellite
                        .filterBounds(geometry)
                        .filterDate(startDate, endDate)
                        .filter(ee.Filter.lt('CLOUD_COVER',Landsat_CLOUD_COVER));
print(Collection_L5)
var mndwi = Collection_L5.map(AWEI_func);
mndwi = mndwi.mean().clip(geometry).rename('NDWI');
// Simple Thresholding
var waterMndwi = mndwi.gt(0)
Map.addLayer(waterMndwi, {palette: ['red', 'yellow', 'green', 'cyan', 'blue']}, 'AWEI_0th', false);
// Otsu Thresholding
// Source https://code.earthengine.google.com/e9c699d7b5ef811d0a67c02756473e9d
// Use lower scale to avoid edges from small buildings
var scale = 100
var bounds = geometry
var cannyThreshold = 0.7
var cannySigma = 1
var minValue = -100000
// Set debug=false if you do not want the charts
var debug = true
// Set this higher to discard smaller edges
var minEdgeLength = 0
var th = computeThresholdUsingOtsu(
  mndwi, scale, bounds, cannyThreshold, cannySigma, minValue, debug, minEdgeLength)
print('Threshold', th)
var waterOtsu = mndwi.gt(th);
Map.addLayer(waterOtsu, {palette: ['red', 'yellow', 'green', 'cyan', 'blue']}, 'AWEI_otsu', true);
/***
 * Compute a threshold using Otsu method (bimodal)
 */
function computeThresholdUsingOtsu(image, scale, bounds, cannyThreshold, cannySigma, minValue, debug, minEdgeLength, minEdgeGradient, minEdgeValue) {
    // clip image edges
    var bufferDistance = ee.Number(scale).multiply(1).multiply(-1)
    var mask = image.mask().clip(bounds.buffer(bufferDistance));
    Map.addLayer(mask, {palette:['ff0000']}, 'mask e khali', false);
    // detect sharp changes
    var edge = ee.Algorithms.CannyEdgeDetector(image, cannyThreshold, cannySigma);
    edge = edge.multiply(mask);
    if(minEdgeLength) {
        var connected = edge.mask(edge).lt(cannyThreshold).connectedPixelCount(200, true);
        var edgeLong = connected.gte(minEdgeLength);
        if(debug) {
          print('Edge length: ', ui.Chart.image.histogram(connected, bounds, scale, buckets))
          Map.addLayer(edge.mask(edge), {palette:['ff0000']}, 'edges (short)', false);
        }
        edge = edgeLong;
    }
    // buffer around NDWI edges
    var edgeBuffer = edge.focal_max(ee.Number(scale), 'square', 'meters');
    if(minEdgeValue) {
      var edgeMin = image.reduceNeighborhood(ee.Reducer.min(), ee.Kernel.circle(ee.Number(scale), 'meters'))
      edgeBuffer = edgeBuffer.updateMask(edgeMin.gt(minEdgeValue))
      if(debug) {
        Map.addLayer(edge.updateMask(edgeBuffer), {palette:['ff0000']}, 'edge min', false);
      }
    }
    if(minEdgeGradient) {
      var edgeGradient = image.gradient().abs().reduce(ee.Reducer.max()).updateMask(edgeBuffer.mask())
      var edgeGradientTh = ee.Number(edgeGradient.reduceRegion(ee.Reducer.percentile([minEdgeGradient]), bounds, scale).values().get(0))
      if(debug) {e
        //print('Edge gradient threshold: ', edgeGradientTh)
        Map.addLayer(edgeGradient.mask(edgeGradient), {palette:['ff0000']}, 'edge gradient', false);
        //print('Edge gradient: ', ui.Chart.image.histogram(edgeGradient, bounds, scale, buckets))
      }
      edgeBuffer = edgeBuffer.updateMask(edgeGradient.gt(edgeGradientTh))
    }
    edge = edge.updateMask(edgeBuffer)
    var edgeBuffer = edge.focal_max(ee.Number(scale).multiply(1), 'square', 'meters');
    var imageEdge = image.mask(edgeBuffer);
    if(debug) {
      Map.addLayer(imageEdge, {palette:['222200', 'ffff00']}, 'image edge buffer', false)
    }
    // compute threshold using Otsu thresholding
    var buckets = 100;
    var hist = ee.Dictionary(ee.Dictionary(imageEdge.reduceRegion(ee.Reducer.histogram(buckets), bounds, scale)).values().get(0));
    var threshold = ee.Algorithms.If(hist.contains('bucketMeans'), otsu(hist), minValue);
    threshold = ee.Number(threshold)
    if(debug) {
        // experimental
        // var jrc = ee.Image('JRC/GSW1_0/GlobalSurfaceWater').select('occurrence')
        // var jrcTh = ee.Number(ee.Dictionary(jrc.updateMask(edge).reduceRegion(ee.Reducer.mode(), bounds, scale)).values().get(0))
        // var water = jrc.gt(jrcTh)
        // Map.addLayer(jrc, {palette: ['000000', 'ffff00']}, 'JRC')
        // print('JRC occurrence (edge)', ui.Chart.image.histogram(jrc.updateMask(edge), bounds, scale, buckets))
        Map.addLayer(edge.mask(edge), {palette:['ff0000']}, 'edges', false);
        //print('Threshold: ', threshold);
        print('Image values:', ui.Chart.image.histogram(image, bounds, scale, buckets));
        //print('Image values (edge): ', ui.Chart.image.histogram(imageEdge, bounds, scale, buckets));
        Map.addLayer(mask.mask(mask), {palette:['000000']}, 'image mask', false);
    }
    return minValue !== 'undefined' ? threshold.max(minValue) : threshold;
}
function otsu(histogram) {
    histogram = ee.Dictionary(histogram);
    var counts = ee.Array(histogram.get('histogram'));
    var means = ee.Array(histogram.get('bucketMeans'));
    var size = means.length().get([0]);
    var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);
    var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);
    var mean = sum.divide(total);
    var indices = ee.List.sequence(1, size);
    // Compute between sum of squares, where each mean partitions the data.
    var bss = indices.map(function(i) {
        var aCounts = counts.slice(0, 0, i);
        var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);
        var aMeans = means.slice(0, 0, i);
        var aMean = aMeans.multiply(aCounts)
            .reduce(ee.Reducer.sum(), [0]).get([0])
            .divide(aCount);
        var bCount = total.subtract(aCount);
        var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
        return aCount.multiply(aMean.subtract(mean).pow(2)).add(
            bCount.multiply(bMean.subtract(mean).pow(2)));
    });
    // Return the mean value corresponding to the maximum BSS.
    return means.sort(bss).get([-1]);
}
// Calculate the area of our region of interest
var aoiArea = ee.Image.pixelArea().divide(1e6).reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geometry,
    scale: 10,
}).get('area');
print('AOI area (km2):', aoiArea);
// Create NDWI mask
var ndwiThreshold = mndwi.gte(th);
var ndwiMask = ndwiThreshold.updateMask(ndwiThreshold);
Map.addLayer(ndwiThreshold, {palette:['black','white']}, 'NDWI Binary Mask', false);
Map.addLayer(ndwiMask, {palette:['blue']}, 'NDWI Mask');
// We can now calculate the masked areas pixel area
var ndwiPixelArea = ee.Image.pixelArea().addBands(ndwiMask.select('NDWI')).divide(1e6).reduceRegion({
    reducer: ee.Reducer.sum().group(1),
    geometry: geometry,
    scale: 10,
    bestEffort: true
});
// We can now calculate the masked areas pixel area
var ndwiPixelArea = ee.Image.pixelArea().addBands(ndwiMask.select('NDWI')).divide(1e6).reduceRegion({
    reducer: ee.Reducer.sum().group(1),
    geometry: geometry,
    scale: 10,
    bestEffort: true
});
var list = ee.List(ee.Dictionary(ndwiPixelArea).get('groups'));
var group0 = ee.Dictionary(list.get(0));
var ndwiWaterArea = ee.Number(group0.get('sum')).float();
print("Water area (km2):", ndwiWaterArea);
var waterRatio = ndwiWaterArea.divide(aoiArea);
//print("Water ratio from area:", waterRatio);
